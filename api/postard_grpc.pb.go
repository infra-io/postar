// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PostardClient is the client API for Postard biz.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PostardClient interface {
	SendEmail(ctx context.Context, in *SendEmailRequest, opts ...grpc.CallOption) (*PostardResponse, error)
}

type postardClient struct {
	cc grpc.ClientConnInterface
}

func NewPostardClient(cc grpc.ClientConnInterface) PostardClient {
	return &postardClient{cc}
}

func (c *postardClient) SendEmail(ctx context.Context, in *SendEmailRequest, opts ...grpc.CallOption) (*PostardResponse, error) {
	out := new(PostardResponse)
	err := c.cc.Invoke(ctx, "/github.com.avinoplan.postar.api.Postard/SendEmail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PostardServer is the server API for Postard biz.
// All implementations must embed UnimplementedPostardServer
// for forward compatibility
type PostardServer interface {
	SendEmail(context.Context, *SendEmailRequest) (*PostardResponse, error)
	mustEmbedUnimplementedPostardServer()
}

// UnimplementedPostardServer must be embedded to have forward compatible implementations.
type UnimplementedPostardServer struct {
}

func (UnimplementedPostardServer) SendEmail(context.Context, *SendEmailRequest) (*PostardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendEmail not implemented")
}
func (UnimplementedPostardServer) mustEmbedUnimplementedPostardServer() {}

// UnsafePostardServer may be embedded to opt out of forward compatibility for this biz.
// Use of this interface is not recommended, as added methods to PostardServer will
// result in compilation errors.
type UnsafePostardServer interface {
	mustEmbedUnimplementedPostardServer()
}

func RegisterPostardServer(s grpc.ServiceRegistrar, srv PostardServer) {
	s.RegisterService(&Postard_ServiceDesc, srv)
}

func _Postard_SendEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendEmailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostardServer).SendEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.avinoplan.postar.api.Postard/SendEmail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostardServer).SendEmail(ctx, req.(*SendEmailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Postard_ServiceDesc is the grpc.ServiceDesc for Postard biz.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Postard_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "github.com.avinoplan.postar.api.Postard",
	HandlerType: (*PostardServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendEmail",
			Handler:    _Postard_SendEmail_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "postard.proto",
}
